


<!DOCTYPE html>
<html>
<head>
<!-- Plotly.js -->
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
* {
    box-sizing: border-box;
}

/* Create two equal columns that floats next to each other */
.column {
    float: left;
width: 50%;
    
    
}

/* Clear floats after the columns */
.row:after {
content: "";
display: table;
clear: both;
}
</style>
</head>


<!------ Include the above in your HEAD tag ---------->



<div class="row">
<div style="margin: 25px;">
<form id="myForm">
<b>Parameters : </b> <br><br>
<label>Young’s modulus E :  </label>
<input type="number" name="E" class="span3" value="210e9"> <br><br>

<label> Poisson’s ratio ν : </label>
<input type="number" name="v" class="span3" value="0.3"><br><br>


<label>Radius of the circular plate a [m]: </label>
<input type="number" name="a" class="span3" value="1"><br><br>

<label>Thickness h [m]: </label>
<input type="number" name="h" class="span3" value="0.01"><br><br>

<label>Total applied load P [N]: </label>
<input type="number" name="P" class="span3" value="-100"><br><br>
<label>Number of supports at the extremity N : </label>
<input type="number" name="N" class="span3" value="3"><br><br>

<label>Radius of the surface where is applied the load b : </label>
<input type="number" name="b" class="span3" value="0.5"><br><br>
Download results file : <input type="checkbox" name="results" id="myCheck" unchecked><br>
File name : <input type="string" name="csvnme" class="span3" value="kirchhofflove">
</form><br>
<br>
<div class="column">
<b>Layout : </b><br><br>
Style of lines : <br><br>
First line :
<select id="fl" >
<option value="solid">Default</option>
<option value="solid">Solid</option>
<option value="dot">Dot</option>
<option value="dashdot">Dashdot</option>
</select><br>
Second line :

<select id="f2" >
<option value="dot">Default</option>
<option value="solid">Solid</option>
<option value="dot">Dot</option>
<option value="dashdot">Dashdot</option>
</select><br>

Third line :

<select id="f3" >
<option value="dashdot">Default</option>
<option value="solid">Solid</option>
<option value="dot">Dot</option>
<option value="dashdot">Dashdot</option>
</select><br><br>
Colors : <br> <br>

<form id="myColor">
First color : <input type="color" name="cl" value="#ff0000"><br>
Second color : <input type="color" name="c2" value="#00fe00"><br>
Third color : <input type="color" name="c3" value="#0000ff"><br>
Fourth color : <input type="color" name="c4" value="#959798"><br>
</form>

</div>


<div class="column">
<b>Saving : </b><br><br>
Graph File Names : <br><br>
<form id="myFile">
Deflection Graph : <input type="string" name="E" class="span3" value="Deflection"> <br>
Internal Loads Graph : <input type="string" name="E" class="span3" value="Internal_Loads"> <br>
Critical Stresses Graph : <input type="string" name="E" class="span3" value="Critical_Stress"> <br>
</form>

<br>Format : <br><br>
<form id="myForm2" action="" method="post">
<input type="radio" name="joke" value="png" checked="checked" /> png
<input type="radio" name="joke" value="jpeg" /> jpeg
<input type="radio" name="joke" value="svg" /> svg
</form><br><br>

<br>

<button onclick="kirchhoffNasa()">Preview</button>
<button onclick="kirchhoffNasa(1,1,1)">Save graphs</button><br>
</div></div>
<body>
<br>
</div>
<br>
<br>
<div align="center">
<div id="myDiv"></div><br><br>
<div id="myDiv2"></div><br><br>
<div id="myDiv3"></div><br><br>
</div>
</body>
<script>

function kirchhoffNasa(img1,img2,img3){
    
    ///////////
    //  Data //
    ///////////
    
    var E = document.getElementById("myForm").elements[0].value;
    var v = document.getElementById("myForm").elements[1].value;
    var a = document.getElementById("myForm").elements[2].value;
    var h = document.getElementById("myForm").elements[3].value;
    var P = document.getElementById("myForm").elements[4].value;
    var N = document.getElementById("myForm").elements[5].value;
    var b = document.getElementById("myForm").elements[6].value;
    var csv = document.getElementById("myForm").elements[7].checked;
    var nameCSV = document.getElementById("myForm").elements[8].value;
    var form = document.querySelector('input[name="joke"]:checked').value;
    var l1= document.getElementById("fl").value;
    var l2= document.getElementById("f2").value;
    var l3= document.getElementById("f3").value;
    var col1= document.getElementById("myColor").elements[0].value;
    var col2= document.getElementById("myColor").elements[1].value;
    var col3= document.getElementById("myColor").elements[2].value;
    var col4= document.getElementById("myColor").elements[3].value;
    var fname1= document.getElementById("myFile").elements[0].value;
    var fname2= document.getElementById("myFile").elements[1].value;
    var fname3= document.getElementById("myFile").elements[2].value;
    
    var v =0.3;
    var pi = Math.PI;
    var inter = a*100+1;
    var interh = h*100+1;
    var r = new Array();
    //r[0] = 1/100;
    var z = new Array();
    for(var i = 0; i < interh; i++)
        z[i] = -h/2 + i/100*h;
    for(var i = 0; i < inter; i++)
        r[i] = i/100*a;
    
    var theta = 0;
    var D = E*Math.pow(h,3)/(12*(1 - Math.pow(v,2)));
    var T =P/(2*pi*a);
    var w = new Array();
    var w0 = new Array();
    var w1 = new Array();
    var w2 = new Array();
    var Qr = new Array();
    var Qr_0 = new Array();
    var Qr_1 = new Array();
    var Mrr = new Array();
    var Mtt = new Array();
    var Mrt = new Array();
    var Mrr0 = new Array();
    var Mtt0 = new Array();
    var Mrt0 = new Array();
    var rSrr = new Array();
    var rStt = new Array();
    var rSrt = new Array();
    var rSrr0 = new Array();
    var rStt0 = new Array();
    var rSrt0 = new Array();
    var Srr  = new Array();
    var Stt = new Array();
    var Srt  = new Array();
    var Srr0  = new Array();
    var Stt0 = new Array();
    var Srt0  = new Array();
    var Srrc = new Array();
    var Sttc = new Array();
    var Srtc = new Array();
    for(var i=0; i<4; i++) {
        //w[i] = new Array();
        //w0[i] = new Array();
        //w1[i] = new Array();
        //w2[i] = new Array();
        Qr[i] = new Array();
        Qr_0[i] = new Array();
        Qr_1[i] = new Array();
        Mrr[i] = new Array();
        Mtt[i] = new Array();
        Mrt[i] = new Array();
        Mrr0[i] = new Array();
        Mtt0[i] = new Array();
        Mrt0[i] = new Array();
        Srrc[i] = new Array();
        Sttc[i] = new Array();
        Srtc[i] = new Array();
    }
    
    
    var d2wdr2_0 = 0;
    
    //Parametres
    var bn = [1, 0.5, 0.25, 0];
    
    //////////////////////////////
    //         Partie 1         //
    //////////////////////////////
    
    
    var p0 = P/(pi*b*b);
    for (var i = 0; i<inter; i++){
        // Probleme 0 \\
        
        if(r[i] >= b) {
            w0[i]= P/(16*pi*D)*((a*a-r[i]*r[i])*(2*(3+v)*a*a-(1-v)*b*b)/(2*(1+v)*a*a)-(b*b+2*r[i]*r[i])*Math.log(a/r[i]));
        }
        else{
            w0[i]= -(p0*(4*Math.pow(b,6)*v + 2*Math.pow(r[i],6)*v - 4*Math.pow(b,6) - 2*Math.pow(r[i],6) + 27*a*a*Math.pow(b,4) - 36*Math.pow(a,4)*b*b + 3*a*a*Math.pow(r[i],4)+ 3*a*a*Math.pow(b,4)*v - 12*Math.pow(a,4)*b*b*v - 9*a*a*Math.pow(r[i],4)*v + 12*a*a*b*b*Math.pow(r[i],2) + 12*a*a*Math.pow(b,4)*Math.log(a/b) + 12*a*a*b*b*Math.pow(r[i],2)*v + 12*a*a*Math.pow(b,4)*v*Math.log(a/b) + 24*a*a*b*b*Math.pow(r[i],2)*Math.log(a/b) + 24*a*a*b*b*Math.pow(r[i],2)*v*Math.log(a/b)))/(192*D*a*a*(v + 1));
        }
        if(b == 0){
            w0[i]= P/(8*pi*D)*((a*a-r[i]*r[i])*(3+v)/(2*(1+v))-Math.log(a/r[i]));
        }
        
        if(b == 0){//Cas d'une charge pontuelle
            w0[i]=  P/(8*pi*D)*((a*a-Math.pow(r[i],2))*(3+v)/(2*(1+v))+Math.pow(r[i],2)*Math.log(r[i]/a));
            if(r[i] == 0){
                w0[i]=  P/(8*pi*D)*((a*a-r[i]*r[i])*(3+v)/(2*(1+v)));
            }
        }
        //////// Probleme 1 & 2 ////////
        var sum0 = 0;
        var sumS = 0;
        var c1 = 0;
        var tol = 10;
        
        while(tol>0.000001){
            c1=c1+1;
            var n = c1*N;
            var oldsum = sum0;
            var oldsumS = sumS;
            
            sum0=oldsum + (1/((n-1)*n)+2*(1+v)/((1-v)*(n-1)*n*n)-(Math.pow(r[i]/a,2))/(n*(n+1)))*Math.pow(r[i]/a,n)*Math.cos(n*theta);
            
            
            sumS=oldsumS + (1/((n-1)*n)*(1/(n+1)+(1+v)/((1-v)*n)));
            
            var max0 = Math.abs(sum0-oldsum);
            var maxS = Math.abs(sumS-oldsumS);
            tol = Math.max(max0, maxS) ;
        }
        
        w1[i]=  -T*Math.pow(a,3)/(D*(3+v))*sum0;
        w2[i]=  ((2*T*Math.pow(a,3))/(D*(3+v))*sumS);
    }
    
    ////// Probleme original ///////
    for (var i = 0; i<100; i++){
        w[i]= w0[i]+w1[i]+w2[i];
    }
    
    
    /////////////////////////////
    //          Partie 2       //
    /////////////////////////////
    
    var d2wdr2_0;
    var d2wdrdt_0;
    
    for(var i=0; i<100; i++){
        
        /////// Problem 0 \\\\\
        d2wdrdt_0 = 0;
        var d2wdt2_0 = 0;
        var dwdt_0 = 0;
        var dwdr_0 = 0;
        
        if(r[i] >= b){
            
            dwdr_0 = -(P*(4*r[i]*Math.log(a/r[i]) - (b*b + 2*Math.pow(r[i],2))/r[i] + (2*r[i]*((2*v + 6)*Math.pow(a,2) + (v - 1)*b*b))/(Math.pow(a,2)*(2*v + 2))))/(16*D*pi);
            var d2wdr2_0 = -(P*(4*Math.log(a/r[i]) + (b*b + 2*Math.pow(r[i],2))/Math.pow(r[i],2) + (2*((2*v + 6)*Math.pow(a,2) + (v - 1)*b*b))/(Math.pow(a,2)*(2*v + 2)) - 8))/(16*D*pi);
            
            Qr_0[i]= -P/(2*pi*r[i]);
            
        }
        else if(r[i] < b){
            
            var dwdr_0 = -(p0*r[i]*(Math.pow(b,4)*v - Math.pow(b,4) + 4*Math.pow(a,2)*b*b - Math.pow(a,2)*Math.pow(r[i],2) - Math.pow(a,2)*Math.pow(r[i],2)*v + 4*Math.pow(a,2)*b*b*Math.log(a/b) + 4*Math.pow(a,2)*b*b*v*Math.log(a/b)))/(16*D*Math.pow(a,2)*(v + 1));
            var d2wdr2_0 = -(p0*(Math.pow(b,4)*v - Math.pow(b,4) + 4*Math.pow(a,2)*b*b - 3*Math.pow(a,2)*Math.pow(r[i],2) - 3*Math.pow(a,2)*Math.pow(r[i],2)*v + 4*Math.pow(a,2)*b*b*Math.log(a/b) + 4*Math.pow(a,2)*b*b*v*Math.log(a/b)))/(16*D*Math.pow(a,2)*(v + 1));
            
            var d3wdr3_0 = (3*p0*r[i])/(8*D);
            
            Qr_0[i]= -D* ( d3wdr3_0 -1/Math.pow(r[i],2) * dwdr_0 + 1/r[i] * d2wdr2_0);
        }
        
        //////// Probleme 1 & 2 \\\\\\\
        var sump2 = new Array();
        var oldsump2 = new Array();
        
        for(var m =0; m<5;m++){
            sump2[m] = 0;
        }
        
        var c2 = 0;
        var tol2 = 10;
        var Qri = 0;
        
        while(tol2>0.0001){
            c2=c2+1;
            var n = c2*N;
            for(var m =0; m<5;m++){
                oldsump2[m] = sump2[m];
            }
            
            sump2[0] = oldsump2[0] + - (n*Math.cos(n*theta)*Math.pow((r[i]/a),(n - 1))*((2*v + 2)/(n*n*(n - 1)*(v - 1)) - 1/(n*(n - 1)) + r[i]*r[i]/(Math.pow(a,2)*n*(n + 1))))/a - (2*r[i]*Math.cos(n*theta)*Math.pow((r[i]/a),n))/(Math.pow(a,2)*n*(n + 1));
            sump2[1] = oldsump2[1] + -(Math.cos(n*theta)*Math.pow((r[i]/a),n)*(Math.pow(a,2)*n + 2*Math.pow(a,2)*v - n*r[i]*r[i] + 2*r[i]*r[i]*v + 2*Math.pow(a,2) - 2*r[i]*r[i] - Math.pow(a,2)*n*v + n*r[i]*r[i]*v))/(Math.pow(a,2)*n*r[i]*r[i]*(v - 1));
            sump2[2] = oldsump2[2] + n*Math.sin(n*theta)*Math.pow((r[i]/a),n)*((2*v + 2)/(n*n*(n - 1)*(v - 1)) - 1/(n*(n - 1)) + r[i]*r[i]/(Math.pow(a,2)*n*(n + 1)));
            sump2[3] = oldsump2[3] + n*n*Math.cos(n*theta)*Math.pow((r[i]/a),n)*((2*v + 2)/(n*n*(n - 1)*(v - 1)) - 1/(n*(n - 1)) + r[i]*r[i]/(Math.pow(a,2)*n*(n + 1)));
            sump2[4] = oldsump2[4] + (n*n*Math.sin(n*theta)*Math.pow((r[i]/a),(n-1))*((2*v + 2)/(n*n*(n - 1)*(v - 1)) - 1/(n*(n - 1)) + r[i]*r[i]/(Math.pow(a,2)*n*(n + 1))))/a + (2*r[i]*Math.sin(n*theta)*Math.pow((r[i]/a),n))/(Math.pow(a,2)*(n + 1));
            
            Qri = Qri - T*Math.pow(a,3)/(v+3) * Math.cos(n*theta) *( (n*n +4*n+5)/(n+1) *Math.pow(r[i],(n-1))/Math.pow(a,(n+2)) +(n-1)*(Math.pow((r[i]),(n-3)) *(n+2*v-n*v+2))/(Math.pow(a,n)*n*(v-1)) + (n-n*n)*Math.pow((r[i]),(n-3))/Math.pow(a,n) *(r[i]*r[i]/(Math.pow(a,2)*(n+1)) -1/(n-1) +(2*v+2)/(n*(n-1)*(v-1))));
            
            
            var max2_1 =Math.abs(sump2[0]-oldsump2[0]);
            var max2_2 =Math.abs(sump2[1]-oldsump2[1]);
            var max2_3 =Math.abs(sump2[2]-oldsump2[2]);
            var max2_4 =Math.abs(sump2[3]-oldsump2[3]);
            var tolé1 = Math.max(max2_1,max2_2);
            var tolé2 = Math.max(max2_3,max2_4) ;
            
            tol2 = Math.max(tolé1,tolé2);
            
        }
        
        var dwdr_1 = T*Math.pow(a,3)/(D*(3+v))*sump2[0];
        var d2wdr2_1 = T*Math.pow(a,3)/(D*(3+v))*sump2[1];
        var dwdt_1 = T*Math.pow(a,3)/(D*(3+v))*sump2[2];
        var d2wdt2_1 = T*Math.pow(a,3)/(D*(3+v))*sump2[3];
        var d2wdrdt_1 = T*Math.pow(a,3)/(D*(3+v))*sump2[4];
        
        
        /////// Probleme original \\\\\\
        dwdr = dwdr_1 +dwdr_0;
        var d2wdr2 = d2wdr2_1 + d2wdr2_0;
        var dwdt =dwdt_1 + dwdt_0;
        var d2wdt2 = d2wdt2_1 + d2wdt2_0;
        var d2wdrdt = d2wdrdt_1 + d2wdrdt_0;
        
        Mrr[i] = -D*(d2wdr2+v/r[i]*(1/r[i]*d2wdt2+dwdr));
        Mtt[i] = -D*(1/r[i]*(1/r[i]*d2wdt2+dwdr)+v*d2wdr2);
        Mrt[i] = -D*(1-v)*(-1/(r[i]*r[i])*dwdt+1/r[i]*d2wdrdt);
        Qr_1[i] = Qri;
        
        
        Qr[i] = Qr_0[i] + Qri;
        
        /////// Cas simply supported \\\\\\\\\\\
        Mrr0[i] = -D*(d2wdr2_0+v/r[i]*(1/r[i]*d2wdt2_0+dwdr_0));
        
        Mtt0[i] = -D*(1/r[i]*(1/r[i]*d2wdt2_0+dwdr_0)+v*d2wdr2_0);
        
        Mrt0[i] = -D*(1-v)*(-1/(r[i]*r[i])*dwdt_0+1/r[i]*d2wdrdt_0);
        
    }
    
    
    //////////////////////////////
    //         Partie 3         //
    //////////////////////////////
    
    
    //Maximal Stress
    
    
    zi =h/2;
    
    for(var g = 0; g<inter ; g++){
        Srrc[g]  = 12*zi/(Math.pow(h,3))*Mrr[g];
        Sttc[g] = 12*zi/(Math.pow(h,3))*Mtt[g];
        Srtc[g]  = 12*zi/(Math.pow(h,3))*Mrt[g];
    }
    
    var maxMrr = Math.max(Math.abs(Mrr));
    
    var irr = indexOfMax(Mrr);
    var maxMtt = Math.max(Math.abs(Mtt));
    var itt = indexOfMax(Mtt);
    var maxMrt = Math.max(Math.abs(Mrt));
    var irt = indexOfMax(Mrt);
    rSrr = r[irr];
    rStt = r[itt];
    rSrt = r[irt];
    
    var v1 = new Array();
    
    for(var u = 0 ; u<interh ; u++){
        
        v1[u] = Math.abs(12*z[u]/(Math.pow(h,3)));
        
    }
    var mv1 = Math.max(v1);
    Srr  = mv1*maxMrr;
    Stt = mv1*maxMtt;
    Srt  = mv1*maxMrt;
    
    
    var maxMrr0 = Math.max(Math.abs(Mrr0));
    var irr0 = indexOfMax(Mrr0);
    var maxMtt0 = Math.max(Math.abs(Mtt0));
    var itt0 = indexOfMax(Mtt0);
    var maxMrt0 = Math.max(Math.abs(Mrt0));
    var irt0 = indexOfMax(Mrt0);
    
    rSrr0 = r[irr0];
    rStt0 = r[itt0];
    rSrt0 = r[irt0];
    
    Srr0  = mv1*maxMrr0;
    Stt0 = mv1*maxMtt0;
    Srt0  = mv1*maxMrt0;
    
    Srrcmax =  Math.max(Srr);
    Sttcmax = Math.max(Stt);
    Srtcmax = Math.max(Srt);
    
    
    function indexOfMax(arr) {
        if (arr.length === 0) {
            return -1;
        }
        
        var max = arr[0];
        var maxIndex = 0;
        
        for (var i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                maxIndex = i;
                max = arr[i];
            }
        }
        
        return maxIndex;
    };
    
    //////////////////////////////
    //           Plot           //
    //////////////////////////////
    
    var trace1 = {
    x: r,
    y: w,
    name: 'ω(r/a,0)',
    type: 'scatter',
    line: {
    color: String(col1),
    dash: String(l1),
    width: 4
    }
    };
    
    var trace2 = {
    x: r,
    y: w0,
    type: 'scatter',
    mode: 'lines',
    name: 'ω0(r/a,0)',
    line: {
    color: String(col2),
    dash: String(l2),
    width: 4
    }
    };
    
    var trace1_2 = {
    x: r,
    y: Mrr,
    type: 'scatter',
    name: 'Mrr',
    type: 'scatter',
    line: {
    color: String(col1),
    dash: String(l1),
    width: 4
    }
    };
    
    var trace1_3 = {
    x: r,
    y: Mtt,
    type: 'scatter',
    name: 'Mtt',
    xaxis: 'x2',
    yaxis: 'y2',
    type: 'scatter',
    line: {
    color: String(col2),
    dash: String(l1),
    width: 4
    }
    };
    
    var trace1_4 = {
    x: r,
    y: Mrt,
    type: 'scatter',
    name: 'Mrt',
    xaxis: 'x3',
    yaxis: 'y3',
    type: 'scatter',
    line: {
    color: String(col3),
    dash: String(l1),
    width: 4
    }
    };
    
    var trace1_5 = {
    x: r,
    y: Qr,
    name: 'Qr',
    type: 'scatter',
    xaxis: 'x4',
    yaxis: 'y4',
    type: 'scatter',
    line: {
    color: String(col4),
    dash: String(l1),
    width: 4
    },
    };
    
    var trace1_6 = {
    x: r,
    y: Srrc,
    type: 'scatter',
    name: 'σ_rr',
    xaxis: 'x6',
    yaxis: 'y6',
    type: 'scatter',
    line: {
    color: String(col1),
    dash: String(l1),
    width: 4
    },
    };
    
    var trace2_6 = {
    x: r,
    y: Sttc,
    type: 'scatter',
    name: 'σ_θθ',
    xaxis: 'x6',
    yaxis: 'y6',
    line: {
    color: String(col2),
    dash: String(l2),
    width: 4
    }
    };
    var trace3_6 = {
    x: r,
    y: Srtc,
    name: 'σ_rθ',
    type: 'scatter',
    xaxis: 'x6',
    yaxis: 'y6',
    line: {
    color: String(col3),
    dash: String(l3),
    width: 4
    }
    };
    
    
    
    var layout = {
    autosize: false,
    width: 700,
    height: 500,
    title: 'Deflection ω(r/a,0)',
    xaxis: {title: 'r/a'},
    yaxis: {title: 'ω(r/a,0)'},
    };
    
    var layout2 = {
    grid: {rows: 2, columns: 2, pattern: 'independent'},
    autosize: false,
    yaxis1: {title: 'Mrr'},
    yaxis2: {title: 'Mtt'},
    yaxis3: {title: 'Mrt'},
    yaxis4: {title: 'Qr'},
    xaxis3: {title: 'r/a'},
    xaxis4: {title: 'r/a'},
    title: 'Internal Loads',
    };
    
    var layout3 = {
    autosize: false,
    width: 700,
    height: 500,
    title: 'Critical Stresses (σ max)',
    yaxis: {title: 'r/a'},
    yaxis: {title: 'σ_max'},
    };
    
    var data = [trace1, trace2]
    var data2 = [trace1_2, trace1_3, trace1_4, trace1_5];
    var data3 = [trace1_6, trace2_6, trace3_6];
    
    var gd = document.getElementById('myDiv2')
    Plotly.newPlot('myDiv', data , layout, {modeBarButtonsToRemove: ['toImage','hoverCompareCartesian','hoverClosestCartesian','resetScale2d','resetScale2d'],displaylogo: false});
    
    Plotly.newPlot('myDiv2', data2, layout2, {modeBarButtonsToRemove: ['toImage','hoverCompareCartesian','hoverClosestCartesian','resetScale2d','resetScale2d'],displaylogo: false});
    Plotly.newPlot('myDiv3', data3, layout3,{modeBarButtonsToRemove: ['toImage','hoverCompareCartesian','hoverClosestCartesian','resetScale2d','resetScale2d'],displaylogo: false});
    
    /////// Create a csv file \\\\\\\\\
    if(csv == true)
    {
        var sur = confirm("Download results as " + String(nameCSV)+".csv ?");
        if( sur == true)
        {
            const rows = [["r",r], ["ω0",w0],["ω",w],["Mrr",Mrr],["Mtt",Mtt],["Mrt",Mrt],["Qr",Qr],["σ_rr",Srrc],["σ_θθ",Sttc],["σ_rθ",Srtc]];
            let csvContent = "data:text/csv;charset=utf-8,";
            rows.forEach(function(rowArray){
                let row = rowArray.join(",");
                csvContent += row + "\r\n";
            });
            var encodedUri = encodeURI(csvContent);
            var link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", String(nameCSV) + ".csv");
            document.body.appendChild(link); // Required for FF
            
            link.click(); // This will download the data file named "my_data.csv".
        };
    };
    
    /////// Create png files\\\\\\\\\
    
    if(img1 == 1 || img2 == 1 || img3 == 1 )
    {
        var tele = confirm("Download the graphs ?");
        if( tele == true)
        {
            if (img1 == 1){
                Plotly.downloadImage('myDiv', {format: String(form), width: 800, height: 600, filename: String(fname1)});
            }
            if (img2 == 1){
                Plotly.downloadImage('myDiv2', {format: String(form), width: 800, height: 600, filename: String(fname2)});
            }
            if (img3 == 1){
                Plotly.downloadImage('myDiv3', {format: String(form), width: 800, height: 600, filename: String(fname3)});
            }
        };};
    
};
</script>
